Answers of theory questions of Lecture 2: 

üî∫ What is `NPM`?
‚û°Ô∏è It is a package manager. For a application there is need to manage lots of packages there this NPM plays it's role in managing the packages for aur application. Like taking example of react app it requires lots of packages for a production ready app so NPM does that job.  

üî∫ What is `Parcel/Webpack`? Why do we need it?
‚û°Ô∏è Parcel/Webpack are the bundlers which gives us various features like minifying the app , optimizing the code , cleaning the console, caching, cross browser support, optimizing the files , managing the port while development that let us to create a production ready app that s why we need them.

üî∫ What is `.parcel-cache` ?
‚û°Ô∏è .parcel-cache is the folder containing the cached files which are generated after the build. These files help in creating subsequent builds faster and quicker. Like if first build takes 2 sec then due to these cached files subsequent one will take only some milliseconds (depending on your machine). These cache files saves lots of time. 

üî∫ What is `npx` ?
‚û°Ô∏è ~ The npx stands for Node Package Execute and it comes with the npm, when you installed npm above 5.2.0 version then automatically npx will installed.
    ~ it is used execute packages.
    ~ we can execute any package without installing it.
    ~ packages used by npx are not installed globally.
 
üî∫ What is difference between `dependencies` vs `devDependencies` ?
‚û°Ô∏è dependencies are those packages on with our application is going to depend while working/ in production where devDependencies are those on which application is depend while its developement process , they are needed for local development and testing.

üî∫ What is Tree Shaking?
‚û°Ô∏è Tree shaking means removing the dead code. In modern JavaScript application , we use module bundlers ( e.g.: webpack or parcel and many more ) to automatically remove dead code when building multiple JavaScript files into single file. This is important for preparing code that is production ready , for example clean structure and minimal file size.

üî∫ What is Hot Module Replacement?
‚û°Ô∏è ~ While using parcel as we make changes in the file , Parcel automatically rebuilds the changed files and updated app in browser.
    ~ By default parcel reload the whole page but in some cases it only reloads the part which is got updated this is called as HMR (Hot Module Replacement).
    ~ HMR improves the development experience by retaining the state of the application by just updating the changes modules in run time. State will be retained on changing small things in code.
    ~ CSS changes are automatically applied via HMR there is no need of the page reload.

üî∫ List down your favorite 5 superpowers of Parcel and describe any 3 of them in your own words.
‚û°Ô∏è  5 superpowers which I like of Parcel are 
    1) Caching while development :  parcel caches everything it builds to disk. Parcel only rebuilds the files that have been changed since last time it ran.For example, if you change a configuration file, all of the source files that rely on that configuration will be rebuilt.

    2) File watcher algo. : This file watcher algorithm watches every file in the project including the node_modules also. This helps parcel in which files need to be build again as they have change.

    3) Size optimization :  this includes various things like 
        ~ minification (Parcel includes minifiers for JavaScript, CSS, HTML, and SVG out of the box. Minification reduces the file size of your output bundles by removing whitespace, renaming variables to shorter names, and many other optimizations.) 
        ~ tree shaking :  In production builds, Parcel statically analyzes the imports and exports of each module, and removes everything that isn't used. This is called "tree shaking" or "dead code elimination". Tree shaking is supported for both static and dynamic import(), CommonJS and ES modules, and even across languages with CSS modules.
        ~ image optimization , developement branch removal , differential building , compression, etc.
    4) Super fast building algorithm 
    5) Hot Module Replacement
    
üî∫ What is `.gitignore`? What should we add and not add into it? 
‚û°Ô∏è ~ .gitignore is the file where we add / mention the files which need to be ignored while uploading / pushing / committing the files on github.
    ~ Packages / files which can be generated on server should be added in the .gitignore file and files those can't be generated should not added in the .gitignore file.

üî∫ What is the difference between `package.json` and `package-lock.json` 
‚û°Ô∏è `package.json` 
    ~ It contains basic information about the project.
    ~ It is mandatory for every project.
    ~ It records important metadata about the project.
    ~ It contains information such as name, description, author, script, and dependencies.

    `package-lock.json` 
    ~ It describes the exact tree that was generated to allow subsequent installs to have the identical tree.
    ~ It is automatically generated for those operations where npm modifies either node_modules tree or package.json.
    ~ It allows future devs to install the same dependencies in the project.
    ~ It contains the name, dependencies, and locked version of the project. 


üî∫ Why should I not modify `package-lock.json`? 
‚û°Ô∏è we should not modify `package-lock.json` because as it is automatically generated from the `package.json` by modifying it may create some problems while using it for production. 

üî∫ What is `node_modules` ? Is it a good idea to push that on git? 
‚û°Ô∏è node_modules are the local copy of the dependencies which are being required or being used in the application. They can be generated by using the file package-lock.json in the project. So pushing them on git will not be a good idea.  

üî∫ What is the `dist` folder? 
‚û°Ô∏è It is the default directory for the output of parcel.

üî∫ What is `browserlists` 
‚û°Ô∏è Browserslist defines and shares the list of target browsers between various frontend build tools. It is one of the most popular frontend library dependencies. 

